#!/usr/bin/env python3
import sys
import os
import json
import requests
from bs4 import BeautifulSoup
import re
import glob
import subprocess
import getpass
import urllib.parse

config_file = "ah.json"

class ArgException(Exception):
    pass

class ElementException(Exception):
    pass

class LoginException(Exception):
    pass

def get_login_session(username, password):
    s = requests.Session()

    r = s.get('https://atcoder.jp/login')
    soup = BeautifulSoup(r.content, 'html.parser')
    csrf_token = soup.select_one('input[name="csrf_token"]')['value']
    data = dict(csrf_token=csrf_token,username=username, password=password)

    headers = {
    'authority': 'atcoder.jp',
    'Content-Type': 'application/x-www-form-urlencoded',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
    }

    ret = s.post('https://atcoder.jp/login', data=data, headers=headers, allow_redirects=False)

    #ログインの正否を確認
    revel = ret.cookies.get('REVEL_FLASH')
    if revel and urllib.parse.unquote(revel, 'utf-8')[1:-1].split(":")[0] == 'success':
        return s
    else:
        raise LoginException("ログインに失敗しています。")

def save_sample(session, contest, task):
    url_name = "https://atcoder.jp/contests/" + contest + "/tasks/" + contest + "_" + task
    res = session.get(url_name)
    soup = BeautifulSoup(res.content, "html.parser")
    elm = soup.select("span.lang-ja div.part pre")
    if len(elm) == 0: raise ElementException("要素が取得できませんでした。")
    n = (len(elm) - 1) // 2
    for i in range(n):
        t_in = elm[i*2+1].text
        t_out = elm[i*2+2].text
        if (not t_in) or (not t_out): continue
        num = i + 1
        #A_1_in.txt
        #A_1_out.txt
        with open(f"{task.upper()}_{num}_in.txt", "w") as f:
            f.write(t_in)
        with open(f"{task.upper()}_{num}_out.txt", "w") as f:
            f.write(t_out)

def initialize():
    #初期化機能(init) ah init abcXXX
    #ディレクトリを名前で作成
    contest = sys.argv[2].lower()
    compiler = "/usr/local/bin/g++"
    settings = {
        "contest" : contest,
        "compiler" : compiler
    }
    prefix = "contest-"
    dir_path = "./" + prefix + contest.upper()
    try:
        print("AtCoderにログインします")
        username=input('username? ')
        password=getpass.getpass('password? ')
        session = get_login_session(username, password)

        #コンテスト名のディレクトリを作成する
        os.mkdir(dir_path)
        os.chdir(dir_path)
        #ディレクトリ内に設定ファイルを作成
        with open(config_file, "w") as f:
            json.dump(settings, f)
        sample_dir = "samples"
        os.mkdir(sample_dir)
        os.chdir(sample_dir)

        #サンプルを読み込んでファイルを作成
        tasks = "abcdef"
        for task in tasks:
            save_sample(session, contest, task)
    except Exception as e:
        print("☠️ エラーが発生しました ☠️")
        print(e)
        exit()

    #ディレクトリに入ってから実行してねと言う
    print(contest.upper() + "フォルダに移動して作業してね")

#作成されたディレクトリに移動して実行
def run_test():
    #設定の読み込み
    try:
        with open(config_file, "r") as f:
            settings = json.load(f)
    except Exception as e:
        print(e)
        print("作業フォルダに移動してください")
        exit()
    #ファイル名を取得して、拡張子を取得
    task = sys.argv[1].upper()
    source_file = sys.argv[2]
    extensions = source_file[source_file.rfind('.') + 1 :].lower()
    sample_files = glob.glob('samples/{}_*.txt'.format(task))
    sample_pairs = []
    for i in range(1, len(sample_files)//2 + 1):
        input_file = 'samples/{}_{}_in.txt'.format(task, i)
        output_file = 'samples/{}_{}_out.txt'.format(task, i)
        if input_file in sample_files and output_file in sample_files:
            sample_pairs.append((i, input_file, output_file))

    if extensions == "py":
        command = ["python3", source_file]
    elif extensions == "cpp":
        command = [settings["compiler"], source_file, "-o", "main.out"]
        subprocess.run(command, check=True )
        command = ["./main.out"]
    for i, input_file, output_file in sample_pairs:
        with open(input_file, "r") as f:
            result = subprocess.run(command, stdin=f, check=True, capture_output=True, text=True)
        with open(output_file, "r") as f:
            if f.read() == result.stdout:
                print("{}-{}: AC".format(task, i))
            else:
                print("{}-{}: WA".format(task, i))
def main():
    try:
        if len(sys.argv) != 3:
            raise ArgException
        op = sys.argv[1]
        if op == "init":
            initialize()
        elif op in list("abcdef"):
            run_test()
        else:
            raise ArgException

    except ArgException:
        print("usage:")
        print(" initialize")
        print("    ah init abcXXX")
        print(" test")
        print("    ah a <<file name>>")
        exit()

main()